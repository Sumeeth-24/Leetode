
                                                      TIME AND SPACE

1. BUBBLE SORT OF ARRAY  TC = O(N^2)
package automate;
import java.io.*;
import java.util.*;

public class MyClass {

    public static void bubbleSort(int[] arr) {
        int n = arr.length;
        for (int itr = 1; itr < n; itr++) {
            for (int j = 0; j < n - itr; j++) {
                if (isSmaller(arr, j + 1, j) == true) {
                    swap(arr, j + 1, j);
                }
            }
        }
    }

    // used for swapping ith and jth elements of array
    public static void swap(int[] arr, int i, int j) {
        System.out.println("Swapping " + arr[i] + " and " + arr[j]);
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    // return true if ith element is smaller than jth element
    public static boolean isSmaller(int[] arr, int i, int j) {
        System.out.println("Comparing " + arr[i] + " and " + arr[j]);
        if (arr[i] < arr[j]) {
            return true;
        } else {
            return false;
        }
    }

    public static void print(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
    }

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        System.out.println("Enter the value");
        int n = scn.nextInt();
        int[] arr = new int[n];
        System.out.println("Enter the value");
        for (int i = 0; i < n; i++) {
            arr[i] = scn.nextInt();
        }
        bubbleSort(arr);
        print(arr);
    }

}

2. SELECTION SORT
package automate;   O(N^2)
import java.io.*;
import java.util.*;

public class MyClass {

	 public static void selectionSort(int[] arr) {
	        for (int i = 0; i < arr.length - 1; i++) {
	            int mi = i;
	            for (int j = i + 1; j < arr.length; j++) {
	                if (isSmaller(arr, j, mi)) {
	                    mi = j;
	                }
	            }
	            swap(arr, i, mi);
	        }
	    }

    // used for swapping ith and jth elements of array
    public static void swap(int[] arr, int i, int j) {
        System.out.println("Swapping " + arr[i] + " and " + arr[j]);
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    // return true if ith element is smaller than jth element
    public static boolean isSmaller(int[] arr, int i, int j) {
        System.out.println("Comparing " + arr[i] + " and " + arr[j]);
        if (arr[i] < arr[j]) {
            return true;
        } else {
            return false;
        }
    }

    public static void print(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
    }

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        System.out.println("Enter the value");
        int n = scn.nextInt();
        int[] arr = new int[n];
        System.out.println("Enter the value");
        for (int i = 0; i < n; i++) {
            arr[i] = scn.nextInt();
        }
        selectionSort(arr);
        print(arr);
    }

}

3. INSERTION SORT
package automate;
import java.io.*;
import java.util.*;

public class MyClass {

	public static void insertionSort(int[] arr) {
        int n = arr.length;
        for (int i = 1; i < n; i++) {
            for (int j = i - 1; j >= 0; j--) {
                if (isGreater(arr, j, j + 1)) {
                    swap(arr, j, j + 1);
                } else {
                    break;
                }
            }
        }
    }

    // used for swapping ith and jth elements of array
    public static void swap(int[] arr, int i, int j) {
        System.out.println("Swapping " + arr[i] + " and " + arr[j]);
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    // return true if ith element is smaller than jth element
    public static boolean isGreater(int[] arr, int j, int i) {
        System.out.println("Comparing " + arr[i] + " and " + arr[j]);
        if (arr[i] < arr[j]) {
            return true;
        } else {
            return false;
        }
    }

    public static void print(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
    }

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        System.out.println("Enter the value");
        int n = scn.nextInt();
        int[] arr = new int[n];
        System.out.println("Enter the value");
        for (int i = 0; i < n; i++) {
            arr[i] = scn.nextInt();
        }
        insertionSort(arr);
        print(arr);
    }

}

4. MERGE AN SORTED ARRAY
package automate;
import java.io.*;
import java.util.*;

public class MyClass {

   

    public static int[] mergeTwoSortedArrays(int[] a, int[] b) {
        int i = 0, j = 0, k = 0;
        int[] ans = new int[a.length + b.length];
        while (i < a.length && j < b.length) {
            if (a[i] <= b[j]) {
                ans[k] = a[i];
                i++;
                k++;
            } else {
                ans[k] = b[j];
                j++;
                k++;
            }
        }

        while (i < a.length) {
            ans[k] = a[i];
            k++;
            i++;
        }

        while (j < b.length) {
            ans[k] = b[j];
            k++;
            j++;
        }

        return ans;
    }

    public static void print(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
    }
    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        System.out.println("Enter the value");
        int n = scn.nextInt();
        int[] a = new int[n];
        System.out.println("Enter the value");
        for (int i = 0; i < n; i++) {
            a[i] = scn.nextInt();
        }
        System.out.println("Enter the value");
        int m = scn.nextInt();
        int[] b = new int[m];
        System.out.println("Enter the value");
        for (int i = 0; i < m; i++) {
            b[i] = scn.nextInt();
        }
        int[] mergedArray = mergeTwoSortedArrays(a, b);
        print(mergedArray);
    }

}

5. MERGE SORT AN ARRAY
package automate;
import java.io.*;
import java.util.*;

public class MyClass {

   

	 public static int[] mergeSort(int[] arr, int lo, int hi) {
	        if (lo == hi) {
	            int[] bans = new int[1];
	            bans[0] = arr[lo];
	            return bans;
	        }
	        int mid = (lo + hi) / 2;
	        int[] lsa = mergeSort(arr, lo, mid);
	        int[] rsa = mergeSort(arr, mid + 1, hi);
	        int[] ans = mergeTwoSortedArrays(lsa, rsa);
	        return ans;
	    }

	    //used for merging two sorted arrays
	    public static int[] mergeTwoSortedArrays(int[] a, int[] b) {
	        System.out.println("Merging these two arrays ");
	        System.out.print("left array -> ");
	        print(a);
	        System.out.print("right array -> ");
	        print(b);
	        int i = 0, j = 0, k = 0;
	        int[] ans = new int[a.length + b.length];
	        while (i < a.length && j < b.length) {
	            if (a[i] <= b[j]) {
	                ans[k] = a[i];
	                i++;
	                k++;
	            } else {
	                ans[k] = b[j];
	                j++;
	                k++;
	            }
	        }

	        while (i < a.length) {
	            ans[k] = a[i];
	            k++;
	            i++;
	        }

	        while (j < b.length) {
	            ans[k] = b[j];
	            k++;
	            j++;
	        }

	        return ans;
	    }

	    public static void print(int[] arr) {
	        for (int i = 0; i < arr.length; i++) {
	            System.out.print(arr[i] + " ");
	        }
	        System.out.println();
	    }

	    public static void main(String[] args) throws Exception {
	        Scanner scn = new Scanner(System.in);
	        System.out.println("Enter the number");
	        int n = scn.nextInt();
	        int[] arr = new int[n];
	        System.out.println("Enter the number");
	        for (int i = 0; i < n; i++) {
	            arr[i] = scn.nextInt();
	        }
	        int[] sa = mergeSort(arr, 0, arr.length - 1);
	        System.out.print("Sorted Array -> ");
	        print(sa);
	    }
}

6. SORT 01's
package automate;
import java.io.*;
import java.util.*;

public class MyClass {

   
	 public static void sort01(int[] arr) {
	        // 0 to j-1  ->  All Zeroes
	        // j to i-1  ->  All Ones's
	        // i to arr.length-1  ->  All unknowns

	        int i = 0, j = 0;
	        while (i < arr.length) {
	            if (arr[i] == 0) {
	                swap(arr, i, j);
	                i++;
	                j++;
	            } else {
	                i++;
	            }
	        }
	    }

	    // used for swapping ith and jth elements of array
	    public static void swap(int[] arr, int i, int j) {
	        System.out.println("Swapping index " + i + " and index " + j);
	        int temp = arr[i];
	        arr[i] = arr[j];
	        arr[j] = temp;
	    }

	    public static void print(int[] arr) {
	        for (int i = 0; i < arr.length; i++) {
	            System.out.println(arr[i]);
	        }
	    }
	    public static void main(String[] args) throws Exception {
	        Scanner scn = new Scanner(System.in);
	        System.out.println("Enter the number");
	        int n = scn.nextInt();
	        int[] arr = new int[n];
	        System.out.println("Enter the number");
	        for (int i = 0; i < n; i++) {
	            arr[i] = scn.nextInt();
	        }
	        sort01(arr);
	        print(arr);
	    }

	}





7. TARGET SUM PAIR
package automate;
import java.io.*;
import java.util.*;

public class MyClass {

   
	public static void targetSumPair(int[] arr, int target) {
        Arrays.sort(arr);
        int left = 0, right = arr.length - 1;
        while (left < right) {
            if (arr[left] + arr[right] < target) {
                left++;
            } else if (arr[left] + arr[right] == target) {
                System.out.println(arr[left] + ", " + arr[right]);
                left++;
                right--;
            } else {
                right--;
            }
        }
    }
    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        System.out.println("Enter the value");
        int n = scn.nextInt();
        int[] arr = new int[n];
        System.out.println("Enter the value");
        for (int i = 0; i < n; i++) {
            arr[i] = scn.nextInt();
        }
        System.out.println("Enter the value");
        int target = scn.nextInt();
        targetSumPair(arr, target);
    }

}

8. QUICK SELECT ALGO TO FIND KTH SMALLEST ELEMENT
package automate;
import java.io.*;
import java.util.*;

public class MyClass {

   
	 public static int quickSelect(int[] arr, int lo, int hi, int k) {
	        int pivot = arr[hi];
	        int pidx = partition(arr, pivot, lo, hi);
	        if (pidx == k) {
	            return arr[pidx];
	        } else if (pidx < k) {
	            return quickSelect(arr, pidx + 1, hi, k);
	        } else {
	            return quickSelect(arr, lo, pidx - 1, k);
	        }
	    }

	    public static int partition(int[] arr, int pivot, int lo, int hi) {
	        System.out.println("pivot -> " + pivot);
	        int i = lo, j = lo;
	        while (i <= hi) {
	            if (arr[i] <= pivot) {
	                swap(arr, i, j);
	                i++;
	                j++;
	            } else {
	                i++;
	            }
	        }
	        System.out.println("pivot index -> " + (j - 1));
	        return (j - 1);
	    }

	    // used for swapping ith and jth elements of array
	    public static void swap(int[] arr, int i, int j) {
	        System.out.println("Swapping " + arr[i] + " and " + arr[j]);
	        int temp = arr[i];
	        arr[i] = arr[j];
	        arr[j] = temp;
	    }

	    public static void print(int[] arr) {
	        for (int i = 0; i < arr.length; i++) {
	            System.out.print(arr[i] + " ");
	        }
	        System.out.println();
	    }

	    public static void main(String[] args) throws Exception {
	        Scanner scn = new Scanner(System.in);
	        System.out.println("Enter the value");
	        int n = scn.nextInt();
	        int[] arr = new int[n];
	        System.out.println("Enter the value");
	        for (int i = 0; i < n; i++) {
	            arr[i] = scn.nextInt();
	        }
	        System.out.println("Enter the value");
	        int k = scn.nextInt();
	        System.out.println(quickSelect(arr, 0, arr.length - 1, k - 1));
    }

}


9. PARTITION AN ARRAY
package automate;
import java.io.*;
import java.util.*;

public class MyClass {

   
	 public static void partition(int[] arr, int pivot) {
	        // 0 to j-1  ->  all elements are equal and smaller than pivot 
	        // j to i-1  ->  all elements are greater than pivot
	        // i to arr.length-1  ->  unknown elements

	        int i = 0, j = 0;
	        while (i < arr.length) {
	            if (arr[i] <= pivot) {
	                swap(arr, i, j);
	                i++;
	                j++;
	            } else {
	                i++;
	            }
	        }
	    }

	    // used for swapping ith and jth elements of array
	    public static void swap(int[] arr, int i, int j) {
	        System.out.println("Swapping " + arr[i] + " and " + arr[j]);
	        int temp = arr[i];
	        arr[i] = arr[j];
	        arr[j] = temp;
	    }

	    public static void print(int[] arr) {
	        for (int i = 0; i < arr.length; i++) {
	            System.out.print(arr[i] + " ");
	        }
	        System.out.println();
	    }

	    public static void main(String[] args) throws Exception {
	        Scanner scn = new Scanner(System.in);
	        System.out.println("Enter the value");
	        int n = scn.nextInt();
	        int[] arr = new int[n];
	        System.out.println("Enter the value");
	        for (int i = 0; i < n; i++) {
	            arr[i] = scn.nextInt();
	        }
	        System.out.println("Enter the value");
	        int pivot = scn.nextInt();
	        partition(arr, pivot);
	        print(arr);
	    }

	}

10. COUNT SORT OF AN ARRAY
package automate;
import java.io.*;
import java.util.*;

public class MyClass {

   
	 public static void countSort(int[] arr, int min, int max) {
	        int range = max - min + 1;
	        int[] ans = new int[arr.length];
	        //make frequency arr
	        int[] farr = new int[range];
	        for (int i = 0; i < arr.length; i++) {
	            farr[arr[i] - min]++;
	        }
	        //convert it into prefix sum array
	        for (int i = 1; i < farr.length; i++) {
	            farr[i] += farr[i - 1];
	        }
	        //stable sorting(filling ans array)
	        for (int i = arr.length - 1; i >= 0; i--) {
	            int val = arr[i];
                    int pos = farr[val - min];
                    int idx = pos - 1;
                    ans[idx] = val;
                    farr[val - min]--;
	        }
	        //filling original array with the help of ans array
	        for (int i = 0; i < arr.length; i++) {
	            arr[i] = ans[i];
	        }
	    }

	    public static void print(int[] arr) {
	        for (int i = 0; i < arr.length; i++) {
	            System.out.println(arr[i]);
	        }
	    }

	    public static void main(String[] args) throws Exception {
	        Scanner scn = new Scanner(System.in);
	        System.out.println("Enter the value");
	        int n = scn.nextInt();
	        int[] arr = new int[n];
	        int max = Integer.MIN_VALUE;
	        int min = Integer.MAX_VALUE;
	        System.out.println("Enter the value");
	        for (int i = 0; i < n; i++) {
	            arr[i] = scn.nextInt();
	            max = Math.max(max, arr[i]);
	            min = Math.min(min, arr[i]);
	        }
	        countSort(arr, min, max);
	        print(arr);
	    }

	}

11. SORT 012
package automate;
import java.io.*;
import java.util.*;

public class MyClass {

   
	 public static void sort012(int[] arr) {
	        // 0 to j-1  ->  All Zeroes
	        // j to i-1  ->  All Ones's
	        // i to k - 1  ->  All unknowns
	        // k to last -> All Two's    

	        int i = 0, j = 0, k = arr.length - 1;
	        while (i <= k) {
	            if (arr[i] == 0) {
	                swap(arr, i, j);
	                i++;
	                j++;
	            } else if (arr[i] == 1) {
	                i++;
	            } else {
	                swap(arr, i, k);
	                k--;
	            }
	        }
	    }

	    // used for swapping ith and jth elements of array
	    public static void swap(int[] arr, int i, int j) {
	        System.out.println("Swapping index " + i + " and index " + j);
	        int temp = arr[i];
	        arr[i] = arr[j];
	        arr[j] = temp;
	    }

	    public static void print(int[] arr) {
	        for (int i = 0; i < arr.length; i++) {
	            System.out.println(arr[i]);
	        }
	    }
	    public static void main(String[] args) throws Exception {
	        Scanner scn = new Scanner(System.in);
	        System.out.println("Enter the value");
	        int n = scn.nextInt();
	        int[] arr = new int[n];
	        System.out.println("Enter the value");
	        for (int i = 0; i < n; i++) {
	            arr[i] = scn.nextInt();
	        }
	        sort012(arr);
	        print(arr);
	    }

	}

12. QUICK SORT
package automate;
import java.io.*;
import java.util.*;

public class MyClass {

   
	 public static void quickSort(int[] arr, int lo, int hi) {
	        if (lo > hi) {
	            return;
	        }
	        int pivot = arr[hi];
	        int pidx = partition(arr, pivot, lo, hi);
	        quickSort(arr, lo, pidx - 1);
	        quickSort(arr, pidx + 1, hi);
	    }

	    public static int partition(int[] arr, int pivot, int lo, int hi) {
	        System.out.println("pivot -> " + pivot);
	        int i = lo, j = lo;
	        while (i <= hi) {
	            if (arr[i] <= pivot) {
	                swap(arr, i, j);
	                i++;
	                j++;
	            } else {
	                i++;
	            }
	        }
	        System.out.println("pivot index -> " + (j - 1));
	        return (j - 1);
	    }

	    // used for swapping ith and jth elements of array
	    public static void swap(int[] arr, int i, int j) {
	        System.out.println("Swapping " + arr[i] + " and " + arr[j]);
	        int temp = arr[i];
	        arr[i] = arr[j];
	        arr[j] = temp;
	    }

	    public static void print(int[] arr) {
	        for (int i = 0; i < arr.length; i++) {
	            System.out.print(arr[i] + " ");
	        }
	        System.out.println();
	    }

	    public static void main(String[] args) throws Exception {
	        Scanner scn = new Scanner(System.in);
	        System.out.println("Enter the value");
	        int n = scn.nextInt();
	        int[] arr = new int[n];
	        System.out.println("Enter the value");
	        for (int i = 0; i < n; i++) {
	            arr[i] = scn.nextInt();
	        }
	        quickSort(arr, 0, arr.length - 1);
	        print(arr);
	    }


	}

13. RADIX SORT
package automate;
import java.io.*;
import java.util.*;

public class MyClass {

   
	 public static void radixSort(int[] arr) {
	        int max = Integer.MIN_VALUE;
	       for(int val: arr) {
	    	   if(val > max) {
	    		   max = val;
	    	   }
	       }
	 int exp = 1;
	 while(exp <= max) {
		    countSort(arr, exp);
		    exp = exp * 10;
	 }
	       
	        
	    }

	    public static void countSort(int[] arr, int exp) {

	        int[] ans = new int[arr.length];
	        // make frequency arr
	        int[] farr = new int[10];
	        for (int i = 0; i < arr.length; i++) {
	            farr[(arr[i] / exp) % 10]++;
	        }
	        // convert it into prefix sum array
	        for (int i = 1; i < farr.length; i++) {
	            farr[i] += farr[i - 1];
	        }
	        // stable sorting(filling ans array)
	        for (int i = arr.length - 1; i >= 0; i--) {
	            int pos = farr[(arr[i] / exp) % 10] - 1;
	            ans[pos] = arr[i];
	            farr[(arr[i] / exp) % 10]--;
	        }
	        // filling original array with the help of ans array
	        for (int i = 0; i < arr.length; i++) {
	            arr[i] = ans[i];
	        }
	        System.out.print("After sorting on " + exp + " place -> ");
	        print(arr);
	    }

	    public static void print(int[] arr) {
	        for (int i = 0; i < arr.length; i++) {
	            System.out.print(arr[i] + " ");
	        }
	        System.out.println();
	    }

	    public static void main(String[] args) throws Exception {
	        Scanner scn = new Scanner(System.in);
	        System.out.println("Enter the value");
	        int n = scn.nextInt();
	        int[] arr = new int[n];
	        System.out.println("Enter the value");
	        for (int i = 0; i < n; i++) {
	            arr[i] = scn.nextInt();
	        }
	        radixSort(arr);
	        print(arr);
	    }


	}

14. SORT DATES
package automate;
import java.io.*;
import java.util.*;

public class MyClass {

   
	 public static void sortDates(String[] arr) {
	        countSort(arr, 1000000, 100, 32);
	        countSort(arr, 10000, 100, 13);
	        countSort(arr, 1, 10000, 2501);
	    }

	    public static void countSort(String[] arr, int div, int mod, int range) {
	        String[] ans = new String[arr.length];
	        // make frequency arr
	        int[] farr = new int[range];
	        for (int i = 0; i < arr.length; i++) {
	            farr[Integer.parseInt(arr[i], 10) / div % mod]++;
	        }
	        // convert it into prefix sum array
	        for (int i = 1; i < farr.length; i++) {
	            farr[i] += farr[i - 1];
	        }
	        // stable sorting(filling ans array)
	        for (int i = arr.length - 1; i >= 0; i--) {
	            int pos = farr[Integer.parseInt(arr[i], 10) / div % mod] - 1;
	            ans[pos] = arr[i];
	            farr[Integer.parseInt(arr[i], 10) / div % mod]--;
	        }
	        // filling original array with the help of ans array
	        for (int i = 0; i < arr.length; i++) {
	            arr[i] = ans[i];
	        }
	    }

	    public static void print(String[] arr) {
	        for (int i = 0; i < arr.length; i++) {
	            System.out.println(arr[i]);
	        }
	    }

	    public static void main(String[] args) throws Exception {
	        Scanner scn = new Scanner(System.in);
	        System.out.println("Enter the value");
	        int n = scn.nextInt();
	        String[] arr = new String[n];
	        System.out.println("Enter the value");
	        for (int i = 0; i < n; i++) {
	            String str = scn.next();
	            arr[i] = str;
	        }
	        sortDates(arr);
	        print(arr);
	    }
}

15. PIVOT IN SORTED AND ROTATED ARRAY
package automate;
import java.io.*;
import java.util.*;

public class MyClass {

   
	 public static int findPivot(int[] arr) {
	        int lo = 0;
	        int hi = arr.length - 1;

	        while (lo < hi) {
	            int mid = (lo + hi) / 2;
	            if (arr[mid] < arr[hi]) { // pivot will lie on left side
	                hi = mid;
	            } else if (arr[mid] > arr[hi]) { // pivot will lie on right side
	                lo = mid + 1;
	            }
	        }

	        return arr[hi];
	    }

	    public static void main(String[] args) throws Exception {
	        Scanner scn = new Scanner(System.in);
	        System.out.println("Enter the value");
	        int n = scn.nextInt();
	        int[] arr = new int[n];
	        System.out.println("Enter the value");
	        for (int i = 0; i < n; i++) {
	            arr[i] = scn.nextInt();
	        }
	        int pivot = findPivot(arr);
	        System.out.println(pivot);
	    }

	}

C:\Program Files (x86)\Common Files\Oracle\Java\javapath