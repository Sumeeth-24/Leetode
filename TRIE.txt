1. IMPLEMENT TRIE

class Trie {

    private class Node {
      Node[]childs;
      boolean isEnd;

      Node() {
        childs = new Node[26];
      }
    }

    final private Node root;
    /** Initialize your data structure here. */
    public Trie() {
      root = new Node();
    }
    
    public void insert(String word) {
        Node curr = root;
      for (int i = 0; i < word.length(); i++) {
        char ch = word.charAt(i);

        if (curr.childs[ch - 'a'] == null) {
          curr.childs[ch - 'a'] = new Node();
        }
        curr = curr.childs[ch - 'a'];
      }
      curr.isEnd = true;
    }
    
    public boolean search(String word) {
         Node curr = root;

      for (int i = 0; i < word.length(); i++) {
        char ch = word.charAt(i);

        if (curr.childs[ch - 'a'] == null)return false;
        curr = curr.childs[ch - 'a'];
      }

      return curr.isEnd;
    }
    
    public boolean startsWith(String prefix) {
         Node curr = root;

      for (int i = 0; i < prefix.length(); i++) {
        char ch = prefix.charAt(i);

        if (curr.childs[ch - 'a'] == null)return false;
        curr = curr.childs[ch - 'a'];
      }

      return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */


2. MAP SUM PAIRS

class MapSum {

     private class Node {
      Node[]childs;
      int score;

      Node() {
        childs = new Node[26];
          score = 0;
      }
    }
    
    HashMap<String, Integer> keyVal = new HashMap<>();
    
    final private Node root;
    public MapSum() {
         root = new Node();
    }
    
    public void insert(String key, int val) {
        int delta = val - keyVal.getOrDefault(key, 0);
        keyVal.put(key, val);
        
         Node curr = root;
      for (int i = 0; i < key.length(); i++) {
        char ch = key.charAt(i);

        if (curr.childs[ch - 'a'] == null) {
          curr.childs[ch - 'a'] = new Node();
        }
        curr = curr.childs[ch - 'a'];
          curr.score += delta;
      } 
    }
    
    public int sum(String prefix) {
        
         Node curr = root;
        
         for (int i = 0; i < prefix.length(); i++) {
        char ch = prefix.charAt(i);

        if (curr.childs[ch - 'a'] == null) {
          return 0;
        }
        curr = curr.childs[ch - 'a'];
      } 
        return curr.score;
    }
}

/**
 * Your MapSum object will be instantiated and called as such:
 * MapSum obj = new MapSum();
 * obj.insert(key,val);
 * int param_2 = obj.sum(prefix);
 */


3. LONGEST WORD IN DICTIONARY

class Solution {
    
    private class Node {
      Node[]childs = new Node[26];
      String str;

      
    }
    
    
    public void insert(Node curr, String s) {
     
      for (int i = 0; i < s.length(); i++) {
        char ch = s.charAt(i);

        if (curr.childs[ch - 'a'] == null) {
          curr.childs[ch - 'a'] = new Node();
        }
        curr = curr.childs[ch - 'a'];
      }
      curr.str = s;
    }
    
    
    public void dfs(Node root){
        
        for(Node child : root.childs){
            if(child != null && child.str != null){
                if(child.str.length() > ans.length()){
                    ans = child.str;
                }
                
                dfs(child);
            }
        }
    }
    
    String ans = "";
    public String longestWord(String[] words) {
        Node root = new Node();
        for(String s: words){
            insert(root, s);
        }
        
        dfs(root);
        
        return ans;
        
        
    }
}


4. STREAM OF CHARACTERS

class StreamChecker {

    private class Node {
      Node[]childs;
      boolean isEnd;

      Node() {
        childs = new Node[26];
      }
    }
    
    final private Node root;
    final private StringBuilder sb;
  
    public void insert(Node curr, String s) {
     
      for (int i = s.length() - 1; i >= 0; i--) {
        char ch = s.charAt(i);

        if (curr.childs[ch - 'a'] == null) {
          curr.childs[ch - 'a'] = new Node();
        }
        curr = curr.childs[ch - 'a'];
      }
      curr.isEnd = true;
    }
    
    
    public StreamChecker(String[] words) {
           root = new Node();
           sb = new StringBuilder();
        
        for(String s: words){
            insert(root, s);
        }
    }
    
    public boolean query(char letter) {
     
        
        sb.append(letter);
        
        Node curr = root;
        
         for (int i = sb.length() - 1; i >= 0; i--) {
        char ch = sb.charAt(i);
             
             curr = curr.childs[ch - 'a'];
             if(curr == null) return false;
             if(curr.isEnd) return true;
         }
        
        return false;
    }
}

/**
 * Your StreamChecker object will be instantiated and called as such:
 * StreamChecker obj = new StreamChecker(words);
 * boolean param_1 = obj.query(letter);
 */



5. REPLACE WORDS


import java.util.*;
class Solution {
    
    private class Node {
      Node[]childs;
      String str;
        
         Node() {
        childs = new Node[26];
      }  
    }
    
    
     public void insert(Node curr, String s) {
     
      for (int i = 0; i < s.length(); i++) {
        char ch = s.charAt(i);

        if (curr.childs[ch - 'a'] == null) {
          curr.childs[ch - 'a'] = new Node();
        }
        curr = curr.childs[ch - 'a'];
      }
      curr.str = s;
    }
    
    
    public String searchPrefix(Node root, String s){
        StringBuilder pre = new StringBuilder();
        
        for(int i=0; i< s.length(); i++){
            char ch = s.charAt(i);
            
            if(root.childs[ch-'a'] == null){
                return null;
            }
            root = root.childs[ch-'a'];
            if(root.str != null){
                return root.str;
            }
        }
        return null;
    }
    
    
    public String replaceWords(List<String> dictionary, String sentence) {
         Node root = new Node();
        
        for(String s : dictionary){
            insert(root, s);
        }
        
        StringBuilder ans = new StringBuilder();
       StringTokenizer st = new StringTokenizer(sentence);
        
        while(st.hasMoreTokens()){
            String word = st.nextToken();
            
            String prefix = searchPrefix(root, word);
            if(prefix != null){
                ans.append(prefix);
            }else{
                ans.append(word);
            }
            ans.append(" ");
        }
        ans.deleteCharAt(ans.length() - 1);
        return ans.toString();
    }
}


6. WORD SEARCH II

class Solution {
    
     private class Node {
      Node[]childs;
      String str;
        
         Node() {
        childs = new Node[26];
      }  
    }
    
    
     public void insert(Node curr, String s) {
     
      for (int i = 0; i < s.length(); i++) {
        char ch = s.charAt(i);

        if (curr.childs[ch - 'a'] == null) {
          curr.childs[ch - 'a'] = new Node();
        }
        curr = curr.childs[ch - 'a'];
      }
      curr.str = s;
    }
    
    
    public List<String> findWords(char[][] board, String[] words) {
        
        Node root = new Node();
        for(String s: words){
            insert(root, s);
        }
        
        boolean[][] visited = new boolean[board.length][board[0].length];
        List<String> ans = new ArrayList<>();
        for(int i=0; i<board.length; i++){
            for(int j=0; j < board[0].length; j++){
                dfs(board, i, j, root, ans, visited);
            }
        }
        
        return ans;
    }
    
    public void dfs(char[][] board, int i, int j, Node root, List<String> ans,  boolean[][] visited){
        
        if(i <0 || j< 0 || i >= board.length || j >= board[0].length || visited[i][j] == true) return;
        if(root.childs[board[i][j] - 'a'] == null) return;
        
        Node child = root.childs[board[i][j] - 'a'];
        if(child.str != null){
            ans.add(child.str);
            child.str = null;
        }
        
        
        visited[i][j] = true;
        dfs(board, i+1, j, child, ans, visited);
        dfs(board, i, j+1, child, ans, visited);
        dfs(board, i-1, j, child, ans, visited);
        dfs(board, i, j-1, child, ans, visited);
          visited[i][j] = false;
    }
}


7. ADD AND SEARCH-WORDS

class WordDictionary {

    private class Node {
      Node[]childs;
      boolean isEnd;

      Node() {
        childs = new Node[26];
      }
        
        
         public boolean find(String word, int i){
        
        if(i== word.length()){
            return isEnd;
        }
        
        if(word.charAt(i) == '.'){
            for(Node child: childs){
                if(child != null && child.find(word, i+1)){
                    return true;
                }
            }
            return false;
        } else {
            if(childs[word.charAt(i) - 'a'] == null){
                return false;
            }else {
                return childs[word.charAt(i) - 'a'].find(word, i+1);
            }
        }
    }
        
    }

    final private Node root;
    public WordDictionary() {
        root = new Node();
    }
    
    public void addWord(String word) {
        Node curr = root;
      for (int i = 0; i < word.length(); i++) {
        char ch = word.charAt(i);

        if (curr.childs[ch - 'a'] == null) {
          curr.childs[ch - 'a'] = new Node();
        }
        curr = curr.childs[ch - 'a'];
      }
      curr.isEnd = true;
    }
    
    
    public boolean search(String word) {
        return root.find(word, 0);
    }  
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */


8. CONCATENATED WORD

class Solution {
    
    private class Node {
      Node[]childs;
      String str;

      Node() {
        childs = new Node[26];
      }
    }
        
        
      public void insert(Node curr, String s) {

                  for (int i = 0; i < s.length(); i++) {
                    char ch = s.charAt(i);

                    if (curr.childs[ch - 'a'] == null) {
                      curr.childs[ch - 'a'] = new Node();
                    }
                    curr = curr.childs[ch - 'a'];
                  }
                  curr.str = s;
        }
        
        
        public void search(Node curr, Node nword){
            
            if(curr.str != null && nword.str != null){
                ans.add(curr.str);
            }
            
            
            if(nword.str != null){
                search(curr, root);
            }
            
            
            for(int i=0; i< 26; i++){
                if(curr.childs[i] != null && nword.childs[i] != null){
                    search(curr.childs[i], nword.childs[i]);
                }
            }
        }
        
        public void search1(Node curr){
            
            if(curr.str != null){
                search(curr, root);
            }
            
            for(Node child : curr.childs){
                if(child != null){
                    search1(child);
                }
            }
        }
        
      
        Node root;
        HashSet<String> ans = new HashSet<>();
    public List<String> findAllConcatenatedWordsInADict(String[] words) {
        
       root = new Node();
        for(String s: words){
            insert(root, s);
        }
        search1(root);
        List<String> al = new ArrayList<>(ans);
        
        return al;
    }
}