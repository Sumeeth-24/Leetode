FLATTEN A DOUBLY LL

class Solution {
    public Node flatten(Node head) {
         if( head == null) return head;
	// Pointer
        Node p = head; 
        while( p!= null) {
            /* CASE 1: if no child, proceed */
            if( p.child == null ) {
                p = p.next;
                continue;
            }
            /* CASE 2: got child, find the tail of the child and link it to p.next */
            Node temp = p.child;
            // Find the tail of the child
            while( temp.next != null ) {
                temp = temp.next;
            }
            // Connect tail with p.next, if it is not null
            temp.next = p.next;  
            if( p.next != null )  p.next.prev = temp;
            // Connect p with p.child, and remove p.child
            p.next = p.child; 
            p.child.prev = p;
            p.child = null;
        }
        
        return head;
    }
}

1. CREATION OF DOUBLELINKEDLIST

package automate;
import java.io.*;
import java.util.*;

class Node {
	  Node next;
	  Node previous;
	  int data;
	}

	class Linked {
		
		  
	  /*
	   * getNewNode() method to generate a new node
	   */
	  public Node getNewNode(int key) {
	    Node a = new Node();
	    a.next = null;
	    a.previous = null;
	    a.data = key;
	    return a;
	  }

	  /*
	   * insert method is used to insert the element in Linked List
	   */
	  public Node insert(int key, Node node) {

	    if (node == null) {
	      return getNewNode(key);

	    }
	    
	    Node head = node;
	    
	    while(node.next != null) {
	    	node = node.next;
	    }
	    
	    Node a = getNewNode(key);
	    a.previous = node;
	    node.next = a;

	    return head;
	  }

	  /*
	   * It'll print the complete linked list
	   */
	  public void printList(Node node) {
	    if (node == null) {
	      return;
	    }

	    System.out.print(node.data + " ");
	    printList(node.next);
	  }
	}

	public class MyClass {
		
	  public static void main(String[] args) {
	    Linked a = new Linked();

	    Node head = null;
	    
	    
	    head = a.insert(12, head);
	    head = a.insert(99, head);
	    head = a.insert(8, head);
	    head = a.insert(39, head);
	    head = a.insert(5, head);
	    head = a.insert(16, head);
	    head = a.insert(20, head);
	    
	    a.printList(head);
	    
	    
	    
	  }
	}



2. ADD NODE AT START

package automate;
import java.io.*;
import java.util.*;

class Node {
	  Node next;
	  Node previous;
	  int data;
	}

	class Linked {
		
		  public Node insertAtStart(Node head, int data) {
			  if(head == null) {
				  return getNewNode(data);
			  }
			  
			  Node t = getNewNode(data);
			  head.previous = t;
			  t.next = head;
			  
			  return t;
		  }
		  
		  
		  
	  /*
	   * getNewNode() method to generate a new node
	   */
	  public Node getNewNode(int key) {
	    Node a = new Node();
	    a.next = null;
	    a.previous = null;
	    a.data = key;
	    return a;
	  }

	  /*
	   * insert method is used to insert the element in Linked List
	   */
	  public Node insert(int key, Node node) {

	    if (node == null) {
	      return getNewNode(key);

	    }
	    
	    Node head = node;
	    
	    while(node.next != null) {
	    	node = node.next;
	    }
	    
	    Node a = getNewNode(key);
	    a.previous = node;
	    node.next = a;

	    return head;
	  }

	  /*
	   * It'll print the complete linked list
	   */
	  public void printList(Node node) {
	    if (node == null) {
	      return;
	    }

	    System.out.print(node.data + " ");
	    printList(node.next);
	  }
	}

	public class MyClass {
		
	  public static void main(String[] args) {
	    Linked a = new Linked();

	    Node head = null;
	    
	    
	    head = a.insert(12, head);
	    head = a.insert(99, head);
	    head = a.insert(8, head);
	    head = a.insert(39, head);
	    head = a.insert(5, head);
	    head = a.insert(16, head);
	    head = a.insert(20, head);
	    
	    a.printList(head);
	    System.out.println();
	    
	    head = a.insertAtStart(head, 20);
	    
	    a.printList(head);
	    
	    
	    
	  }
	}


3. INSERT NODE AT GIVEN POSITION

package automate;
import java.io.*;
import java.util.*;

class Node {
	  Node next;
	  Node previous;
	  int data;
	}

	class Linked {
		
		  public Node insertAtGivenPosition(Node head, int data, int position) {
			  if(head == null) {
				  if(position == 1) {
				  return getNewNode(data);
			  } else {
				  return null;
			  }
		  }
			  
			  
			  if(position == 1) {
				  Node t = getNewNode(data);
				  head.previous = t;
				  t.next = head;
				  return t;
			  }
			  
			  Node node = head;
			  
			  while(node != null && position > 2) {
				  node = node.next;
				  position--;
			  }
			
			  if(node == null) {
				  System.out.println("Position is not valid");
				  return head;
			  }
			  
			  Node t = getNewNode(data);
			  t.next = node.next;
			  t.previous = node;
			  if(node.next != null) {
				  node.next.previous = t;
			  }
			  node.next = t;
			  
			  return head;
		  }
		  
		  
		  
	  /*
	   * getNewNode() method to generate a new node
	   */
	  public Node getNewNode(int key) {
	    Node a = new Node();
	    a.next = null;
	    a.previous = null;
	    a.data = key;
	    return a;
	  }

	  /*
	   * insert method is used to insert the element in Linked List
	   */
	  public Node insert(int key, Node node) {

	    if (node == null) {
	      return getNewNode(key);

	    }
	    
	    Node head = node;
	    
	    while(node.next != null) {
	    	node = node.next;
	    }
	    
	    Node a = getNewNode(key);
	    a.previous = node;
	    node.next = a;

	    return head;
	  }

	  /*
	   * It'll print the complete linked list
	   */
	  public void printList(Node node) {
	    if (node == null) {
	      return;
	    }

	    System.out.print(node.data + " ");
	    printList(node.next);
	  }
	}

	public class MyClass {
		
	  public static void main(String[] args) {
	    Linked a = new Linked();

	    Node head = null;
	    
	    
	    head = a.insert(12, head);
	    head = a.insert(99, head);
	    head = a.insert(8, head);
	    head = a.insert(39, head);
	    head = a.insert(5, head);
	    head = a.insert(16, head);
	    head = a.insert(20, head);
	    
	    a.printList(head);
	    System.out.println();
	    
	    head = a.insertAtGivenPosition(head, 29, 3);
	    
	    a.printList(head);
	    
	    
	    
	  }
	}

4. DELETE THE FIRST NODE

package automate;
import java.io.*;
import java.util.*;

class Node {
	  Node next;
	  Node previous;
	  int data;
	}

	class Linked {
		
		  public Node deleteFirstNode(Node head) {
			  if(head == null) {
				
				  return null;
			  }
		  
			  
			  
			 if(head.next != null) {
				 head.next.previous = null;
			 }
			  
			  return head.next;
		  }
		  
		  
		  
	  /*
	   * getNewNode() method to generate a new node
	   */
	  public Node getNewNode(int key) {
	    Node a = new Node();
	    a.next = null;
	    a.previous = null;
	    a.data = key;
	    return a;
	  }

	  /*
	   * insert method is used to insert the element in Linked List
	   */
	  public Node insert(int key, Node node) {

	    if (node == null) {
	      return getNewNode(key);

	    }
	    
	    Node head = node;
	    
	    while(node.next != null) {
	    	node = node.next;
	    }
	    
	    Node a = getNewNode(key);
	    a.previous = node;
	    node.next = a;

	    return head;
	  }

	  /*
	   * It'll print the complete linked list
	   */
	  public void printList(Node node) {
	    if (node == null) {
	      return;
	    }

	    System.out.print(node.data + " ");
	    printList(node.next);
	  }
	}

	public class MyClass {
		
	  public static void main(String[] args) {
	    Linked a = new Linked();

	    Node head = null;
	    
	    
	    head = a.insert(12, head);
	    head = a.insert(99, head);
	    head = a.insert(8, head);
	    head = a.insert(39, head);
	    head = a.insert(5, head);
	    head = a.insert(16, head);
	    head = a.insert(20, head);
	    
	    a.printList(head);
	    System.out.println();
	    
	    head = a.deleteFirstNode(head);
	    
	    a.printList(head);
	    
	    
	    
	  }
	}


5. DELETE A NODE IN DOUBLYLINKEDLIST

package automate;
import java.io.*;
import java.util.*;

class Node {
	  Node next;
	  Node previous;
	  int data;
	}

	class Linked {
		
		  public Node deleteNode(Node head, int data) {
			  if(head == null) {
				
				  return null;
			  }
		  
			  
			  
			if(head.data == data) {
				if(head.next != null) {
					head.next.previous = null;
				}
			  
			  return head.next;
		  }
			
			Node node = head;
			
			while(node != null) {
				if(node.data == data) {
					break;
				}
				node = node.next;
			}
			
			if(node == null) {
				System.out.println("Element doesn't exists in list");
				return head;
			}
			
			if(node.next != null) {
				node.next.previous = node.previous;
			}
			node.previous.next = node.next;
			
			return head;
			
		  }
		  
		  
		  
	  /*
	   * getNewNode() method to generate a new node
	   */
	  public Node getNewNode(int key) {
	    Node a = new Node();
	    a.next = null;
	    a.previous = null;
	    a.data = key;
	    return a;
	  }

	  /*
	   * insert method is used to insert the element in Linked List
	   */
	  public Node insert(int key, Node node) {

	    if (node == null) {
	      return getNewNode(key);

	    }
	    
	    Node head = node;
	    
	    while(node.next != null) {
	    	node = node.next;
	    }
	    
	    Node a = getNewNode(key);
	    a.previous = node;
	    node.next = a;

	    return head;
	  }

	  /*
	   * It'll print the complete linked list
	   */
	  public void printList(Node node) {
	    if (node == null) {
	      return;
	    }

	    System.out.print(node.data + " ");
	    printList(node.next);
	  }
	}

	public class MyClass {
		
	  public static void main(String[] args) {
	    Linked a = new Linked();

	    Node head = null;
	    
	    
	    head = a.insert(12, head);
	    head = a.insert(99, head);
	    head = a.insert(8, head);
	    head = a.insert(39, head);
	    head = a.insert(5, head);
	    head = a.insert(16, head);
	    head = a.insert(20, head);
	    
	    a.printList(head);
	    System.out.println();
	    
	    head = a.deleteNode(head, 39);
	    
	    a.printList(head);
	    
	    
	    
	  }
	}



6. DELETE NODE AT GIVEN POSITION

package automate;
import java.io.*;
import java.util.*;

class Node {
	  Node next;
	  Node previous;
	  int data;
	}

	class Linked {
		
		  public Node deleteNodeAtGivenPosition(Node head, int position) {
			  if(head == null) {
				
				  return null;
			  }
		  
			  
			  
			if(position == 1) {
				if(head.next != null) {
					head.next.previous = null;
				}
			  
			  return head.next;
		  }
			
			Node node = head;
			
			while(node != null && position > 1) {
				
				node = node.next;
				position--;
			}
			
			if(node == null) {
				System.out.println("Element doesn't exists at given position in list");
				return head;
			}
			
			if(node.next != null) {
				node.next.previous = node.previous;
			}
			node.previous.next = node.next;
			
			return head;
			
		  }
		  
		  
		  
	  /*
	   * getNewNode() method to generate a new node
	   */
	  public Node getNewNode(int key) {
	    Node a = new Node();
	    a.next = null;
	    a.previous = null;
	    a.data = key;
	    return a;
	  }

	  /*
	   * insert method is used to insert the element in Linked List
	   */
	  public Node insert(int key, Node node) {

	    if (node == null) {
	      return getNewNode(key);

	    }
	    
	    Node head = node;
	    
	    while(node.next != null) {
	    	node = node.next;
	    }
	    
	    Node a = getNewNode(key);
	    a.previous = node;
	    node.next = a;

	    return head;
	  }

	  /*
	   * It'll print the complete linked list
	   */
	  public void printList(Node node) {
	    if (node == null) {
	      return;
	    }

	    System.out.print(node.data + " ");
	    printList(node.next);
	  }
	}

	public class MyClass {
		
	  public static void main(String[] args) {
	    Linked a = new Linked();

	    Node head = null;
	    
	    
	    head = a.insert(12, head);
	    head = a.insert(99, head);
	    head = a.insert(8, head);
	    head = a.insert(39, head);
	    head = a.insert(5, head);
	    head = a.insert(16, head);
	    head = a.insert(20, head);
	    
	    a.printList(head);
	    System.out.println();
	    
	    head = a.deleteNodeAtGivenPosition(head, 4);
	    
	    a.printList(head);
	    
	    
	    
	  }
	}


7. GET SIZE OF LINKEDLIST

package automate;
import java.io.*;
import java.util.*;

class Node {
	  Node next;
	  Node previous;
	  int data;
	}

	class Linked {
		
		  public int getSizeofList(Node node) {
			  if(node == null) {
				  return 0;
			  }
		  
			  
			  
			int count = 0;
			
			while(node != null) {
				count++;
				node = node.next;
			}
			
			return count;
			
		  }
	  
		  
		  
	  /*
	   * getNewNode() method to generate a new node
	   */
	  public Node getNewNode(int key) {
	    Node a = new Node();
	    a.next = null;
	    a.previous = null;
	    a.data = key;
	    return a;
	  }

	  /*
	   * insert method is used to insert the element in Linked List
	   */
	  public Node insert(int key, Node node) {

	    if (node == null) {
	      return getNewNode(key);

	    }
	    
	    Node head = node;
	    
	    while(node.next != null) {
	    	node = node.next;
	    }
	    
	    Node a = getNewNode(key);
	    a.previous = node;
	    node.next = a;

	    return head;
	  }

	  /*
	   * It'll print the complete linked list
	   */
	  public void printList(Node node) {
	    if (node == null) {
	      return;
	    }

	    System.out.print(node.data + " ");
	    printList(node.next);
	  }
	}

	public class MyClass {
		
	  public static void main(String[] args) {
	    Linked a = new Linked();

	    Node head = null;
	    
	    
	    head = a.insert(12, head);
	    head = a.insert(99, head);
	    head = a.insert(8, head);
	    head = a.insert(39, head);
	    head = a.insert(5, head);
	    head = a.insert(16, head);
	    head = a.insert(20, head);
	    
	    a.printList(head);
	    System.out.println();
	    
	    System.out.println("Size "+ a.getSizeofList(head));
	    
	    
	    
	    
	    
	  }
	}



8. ROTATE THE LIST BY K NODES

package automate;
import java.io.*;
import java.util.*;

class Node {
	  Node next;
	  Node previous;
	  int data;
	}

	class Linked {
		
		  public int getSizeofList(Node node) {
			  if(node == null) {
				  return 0;
			  }
		  
			  
			  
			int count = 0;
			
			while(node != null) {
				count++;
				node = node.next;
			}
			
			return count;
			
		  }
		
		  public Node rotateList(Node head, int k) {
			  if(head == null || head.next == null) {
				  return head;
			  }
		    
			  
			Node node = head;
			
			k = k % getSizeofList(head);
			if(k == 0) {
				return head;
			}
			
			while(node != null && k > 1) {
				node = node.next;
				k--;
			}
			
			Node newHead = node.next;
			newHead.previous = null;
			
			node.next = null;
			
			Node tmp = newHead;
			while(tmp.next != null) {
				tmp = tmp.next;
			}
			
			tmp.next = head;
			head.previous = tmp;
			
			return newHead;
			
			
		  }
	  
		  
		  
	  /*
	   * getNewNode() method to generate a new node
	   */
	  public Node getNewNode(int key) {
	    Node a = new Node();
	    a.next = null;
	    a.previous = null;
	    a.data = key;
	    return a;
	  }

	  /*
	   * insert method is used to insert the element in Linked List
	   */
	  public Node insert(int key, Node node) {

	    if (node == null) {
	      return getNewNode(key);

	    }
	    
	    Node head = node;
	    
	    while(node.next != null) {
	    	node = node.next;
	    }
	    
	    Node a = getNewNode(key);
	    a.previous = node;
	    node.next = a;

	    return head;
	  }

	  /*
	   * It'll print the complete linked list
	   */
	  public void printList(Node node) {
	    if (node == null) {
	      return;
	    }

	    System.out.print(node.data + " ");
	    printList(node.next);
	  }
	}

	public class MyClass {
		
	  public static void main(String[] args) {
	    Linked a = new Linked();

	    Node head = null;
	    
	    
	    head = a.insert(12, head);
	    head = a.insert(99, head);
	    head = a.insert(8, head);
	    head = a.insert(39, head);
	    head = a.insert(5, head);
	    head = a.insert(16, head);
	    head = a.insert(20, head);
	    
	    a.printList(head);
	    System.out.println();
	    
	   head =  a.rotateList(head, 3);
	    
	    a.printList(head);
	    
	    
	    
	  }
	}
